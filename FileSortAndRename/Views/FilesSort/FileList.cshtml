@using FileSortAndRename.Helpers
@model IList<FileSortAndRename.Models.FileItem>


<style>
    #sortable {
        list-style-type: none;
        margin: 0;
        padding: 0;
        width: 60%;
    }

        #sortable li {
            margin: 0 3px 3px 3px;
            padding: 0.1em;
            padding-left: 1.5em;
            font-size: 1.0em;
            height: 75px;
            border: dotted 1px #a4b1e3;
        }

            #sortable li span {
                position: absolute;
                margin-left: -1.3em;
            }

    #productImagePopup {
        border: 2px solid black;
    }


    li {
        background-color: Azure;
        border-bottom: 1px dotted Gray;
    }

        li.selected {
            background-color: #dae719;
        }
</style>

<strong class="error">{{ error }}</strong>
<strong ng-show="loading">loading...</strong>

<ul id="sortable">
    <li ng-repeat="fileItem in fileList" id="{{ fileItem.Name }}"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>
        <img ng-src="{{ fileItem.Path }}" class="productImage" />&nbsp;&nbsp;
        {{ fileItem.Name }}
    </li>
</ul>
@*style="max-width: 75px; max-height: 75px;"*@

@*<pre ng-bind="fileList|json"></pre>*@


@*<ul id="sortable">
    @foreach (var fileItem in Model.ToList().OrderBy(x => x.Name))
    {
        <li class="ui-state-default" id="@fileItem.Name"><span class="ui-icon ui-icon-arrowthick-2-n-s"></span>
            @Html.Raw(@Html.Image(fileItem.Name, fileItem.Path, new { width = 40, height = 40 }))&nbsp;&nbsp;
            @fileItem.Name (@(fileItem.Size / 1000) KB)
        </li>
    }

</ul>*@

<script>
    $(function () {
        $("#sortable").sortable();
        //$("#sortable").disableSelection();

        $("ul").on('click', 'li', function (e) {
            if (e.ctrlKey || e.metaKey) {
                $(this).toggleClass("selected");
            } else {
                $(this).addClass("selected").siblings().removeClass('selected');
            }
        }).sortable({
            connectWith: "ul",
            delay: 150, //Needed to prevent accidental drag when trying to select
            revert: 0,
            helper: function (e, item) {
                //Basically, if you grab an unhighlighted item to drag, it will deselect (unhighlight) everything else
                if (!item.hasClass('selected')) {
                    item.addClass('selected').siblings().removeClass('selected');
                }

                //////////////////////////////////////////////////////////////////////
                //HERE'S HOW TO PASS THE SELECTED ITEMS TO THE `stop()` FUNCTION:

                //Clone the selected items into an array
                var elements = item.parent().children('.selected').clone();

                //Add a property to `item` called 'multidrag` that contains the 
                //  selected items, then remove the selected items from the source list
                item.data('multidrag', elements).siblings('.selected').remove();

                //Now the selected items exist in memory, attached to the `item`,
                //  so we can access them later when we get to the `stop()` callback

                //Create the helper
                var helper = $('<li/>');
                return helper.append(elements);
            },
            stop: function (e, ui) {
                //Now we access those items that we stored in `item`s data!
                var elements = ui.item.data('multidrag');

                //`elements` now contains the originally selected items from the source list (the dragged items)!!

                //Finally I insert the selected items after the `item`, then remove the `item`, since 
                //  item is a duplicate of one of the selected items.
                ui.item.after(elements).remove();
            }

        });

    });
  
</script>